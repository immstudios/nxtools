[tool.poetry]
name = "nxtools"
version = "1.6"
description = "nxtools is a set of various tools and helpers used by Nebula broadcast automation system and other software by imm studios, z.s."
keywords = ["utilities", "logging", "automation", "ffmpeg", "casparcg"]
repository = "https://github.com/immstudios/nxtools"
authors = ["Martin Wacker <martas@imm.cz>"]
license = "MIT"
readme = "README.md"
classifiers=[
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Topic :: Multimedia :: Video :: Conversion",
    "Topic :: Utilities",
]

[tool.poetry.dependencies]
python = "^3.10"
colorama = "^0.4.4"
Unidecode = "^1.2.0"

[tool.poetry.dev-dependencies]
ruff = "^0.0.267"
black = {version = "^22.1.0", allow-prereleases = true}
mypy = "^1.3"
pre-commit = "^2.20.0"

[tool.poetry.scripts]
test = 'scripts:test'
docs = 'scripts:docs'

[tool.ruff]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    # "B",   # flake8-bugbear
    "ISC", # flake8-implicit-str-concat
    "C4",  # flake8-comprehensions
    # "N",    # pep8-naming
    # "SIM",  # flake8-simplify
]

ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex. C'mon - this is a complex project
]

[tool.black]
line-length = 88

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
